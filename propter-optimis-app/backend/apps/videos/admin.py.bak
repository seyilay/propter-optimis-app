"""
Video admin configuration for Propter-Optimis Sports Analytics Platform.
"""
from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe

from .models import Video, VideoUploadSession, VideoMetadata
from apps.core.admin import TimestampedModelAdmin


class VideoMetadataInline(admin.StackedInline):
    """Inline admin for video metadata."""
    model = VideoMetadata
    can_delete = False
    verbose_name_plural = 'Metadata'
    fields = [
        ('resolution', 'frame_rate', 'bitrate', 'codec'),
        ('match_date', 'home_team', 'away_team'),
        ('competition', 'venue'),
        ('extracted_frames', 'processing_notes')
    ]


class VideoUploadSessionInline(admin.StackedInline):
    """Inline admin for video upload session."""
    model = VideoUploadSession
    can_delete = False
    verbose_name_plural = 'Upload Session'
    readonly_fields = [
        'upload_id', 'progress_percentage', 'is_completed', 'is_failed',
        'started_at', 'completed_at', 'failed_at'
    ]
    fields = [
        'upload_id', 'total_chunks', 'uploaded_chunks', 'chunk_size',
        'progress_percentage', 'is_completed', 'is_failed',
        'started_at', 'completed_at', 'failed_at'
    ]


@admin.register(Video)
class VideoAdmin(admin.ModelAdmin):
    """Admin configuration for Video model."""
    
    inlines = [VideoMetadataInline, VideoUploadSessionInline]
    
    list_display = [
        'filename', 'user', 'status', 'analysis_intent', 
        'formatted_duration', 'formatted_file_size', 
        'upload_progress_bar', 'created_at'
    ]
    list_filter = [
        'status', 'analysis_intent', 'content_type', 'created_at'
    ]
    search_fields = ['filename', 'user__email', 'user__team_name']
    readonly_fields = [
        'id', 'created_at', 'formatted_duration', 'formatted_file_size',
        'upload_progress_bar', 'video_preview'
    ]
    ordering = ['-created_at']
    
    fieldsets = (
        ('Basic Information', {
            'fields': ('user', 'filename', 'status', 'analysis_intent')
        }),
        ('File Details', {
            'fields': (
                'file_size', 'formatted_file_size', 'content_type', 
                'duration', 'formatted_duration'
            )
        }),
        ('Upload Information', {
            'fields': ('upload_progress', 'upload_progress_bar', 'error_message')
        }),
        ('Storage', {
            'fields': ('s3_url', 'video_preview'),
            'classes': ('collapse',)
        }),
        ('Timestamps', {
            'fields': ('id', 'created_at'),
            'classes': ('collapse',)
        })
    )
    
    def upload_progress_bar(self, obj):
        """Display upload progress as a progress bar."""
        if obj.upload_progress is not None:
            color = 'green' if obj.upload_progress == 100 else 'blue'
            return format_html(
                '<div style="width:100px; background-color:#f0f0f0; border-radius:3px;">'  
                '<div style="width:{}%; background-color:{}; height:20px; border-radius:3px; text-align:center; color:white; font-size:12px; line-height:20px;">'  
                '{}%</div></div>',
                obj.upload_progress, color, obj.upload_progress
            )
        return '-'
    upload_progress_bar.short_description = 'Progress'
    
    def video_preview(self, obj):
        """Display video preview if available."""
        if obj.s3_url:
            return format_html(
                '<video width="320" height="240" controls>'  
                '<source src="{}" type="{}">'  
                'Your browser does not support the video tag.'  
                '</video>',
                obj.s3_url, obj.content_type or 'video/mp4'
            )
        return 'No video available'
    video_preview.short_description = 'Preview'
    
    def get_queryset(self, request):
        """Optimize queryset with related objects."""
        return super().get_queryset(request).select_related(
            'user', 'metadata', 'upload_session'
        )


@admin.register(VideoUploadSession)
class VideoUploadSessionAdmin(TimestampedModelAdmin):
    """Admin configuration for VideoUploadSession model."""
    
    list_display = [
        'video', 'upload_id', 'progress_bar', 'upload_status',
        'started_at', 'completed_at'
    ]
    list_filter = ['is_completed', 'is_failed', 'started_at']
    search_fields = ['upload_id', 'video__filename', 'video__user__email']
    readonly_fields = [
        'progress_percentage', 'is_completed', 'is_failed', 'progress_bar'
    ]
    
    fieldsets = (
        ('Upload Information', {
            'fields': ('video', 'upload_id', 'total_chunks', 'uploaded_chunks', 'chunk_size')
        }),
        ('Progress', {
            'fields': ('progress_percentage', 'progress_bar', 'is_completed', 'is_failed')
        }),
        ('Timestamps', {
            'fields': ('started_at', 'completed_at', 'failed_at'),
            'classes': ('collapse',)
        })
    )
    
    def progress_bar(self, obj):
        """Display progress as a visual bar."""
        progress = obj.progress_percentage
        if obj.is_failed:
            color = 'red'
        elif obj.is_completed:
            color = 'green'
        else:
            color = 'blue'
        
        return format_html(
            '<div style="width:100px; background-color:#f0f0f0; border-radius:3px;">'  
            '<div style="width:{}%; background-color:{}; height:20px; border-radius:3px; text-align:center; color:white; font-size:12px; line-height:20px;">'  
            '{}%</div></div>',
            progress, color, progress
        )
    progress_bar.short_description = 'Progress'
    
    def upload_status(self, obj):
        """Display upload status with color coding."""
        if obj.is_failed:
            return format_html(
                '<span style="color: red; font-weight: bold;">Failed</span>'
            )
        elif obj.is_completed:
            return format_html(
                '<span style="color: green; font-weight: bold;">Completed</span>'
            )
        else:
            return format_html(
                '<span style="color: blue; font-weight: bold;">In Progress</span>'
            )
    upload_status.short_description = 'Status'


@admin.register(VideoMetadata)
class VideoMetadataAdmin(TimestampedModelAdmin):
    """Admin configuration for VideoMetadata model."""
    
    list_display = [
        'video', 'match_description', 'resolution', 'frame_rate',
        'match_date', 'competition'
    ]
    list_filter = ['competition', 'match_date', 'resolution']
    search_fields = [
        'video__filename', 'home_team', 'away_team', 'competition', 'venue'
    ]
    
    fieldsets = (
        ('Video Reference', {
            'fields': ('video',)
        }),
        ('Technical Details', {
            'fields': ('resolution', 'frame_rate', 'bitrate', 'codec', 'extracted_frames')
        }),
        ('Match Information', {
            'fields': ('match_date', 'home_team', 'away_team', 'competition', 'venue')
        }),
        ('Processing Notes', {
            'fields': ('processing_notes',),
            'classes': ('collapse',)
        })
    )
    
    def get_queryset(self, request):
        """Optimize queryset with related objects."""
        return super().get_queryset(request).select_related('video', 'video__user')
